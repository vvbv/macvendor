#!/usr/bin/env python3

import os
import sys
import urllib.request

from os.path import expanduser

HOME = expanduser("~")
ENV_FOLDER = HOME + "/.macvendors"
VENDORS_FILE = ENV_FOLDER + "/oui.txt"
UPDATE_VENDORS = False
QUIET_MODE = False
ERROR_MESSAGE = "macvendor [ --update, --no-update ] [ XX:XX:XX:XX:XX:XX ]"

if len(sys.argv) < 3:
    print(ERROR_MESSAGE)
    sys.exit(1)

# Check for --quiet flag
if '--quiet' in sys.argv:
    QUIET_MODE = True
    sys.argv.remove('--quiet')

mac_to_find = sys.argv[2:][0].upper().strip()

if sys.argv[1:][0] == "--update":
    UPDATE_VENDORS = True
elif sys.argv[1:][0] == "--no-update":
    UPDATE_VENDORS = False
else:
    print(ERROR_MESSAGE)
    sys.exit(1)

def downloadVendors():
    if not QUIET_MODE:
        print("Updating list of vendors.")
    url = "http://standards-oui.ieee.org/oui.txt"
    req = urllib.request.Request(url, headers={"User-Agent": "Mozilla/5.0"})
    u = urllib.request.urlopen(req)
    with open(VENDORS_FILE, 'wb') as f:
        meta = u.info()
        file_size = int(meta.get("Content-Length", 0))
        if not QUIET_MODE:
            print("Downloading list, size: %s bytes" % file_size)
        file_size_dl = 0
        block_sz = 8192
        while True:
            buffer = u.read(block_sz)
            if not buffer:
                break
            file_size_dl += len(buffer)
            f.write(buffer)
            if not QUIET_MODE and file_size:
                status = r"%10d  [%3.2f%%]" % (file_size_dl, file_size_dl * 100. / file_size)
                print(status, end='\r')
    if not QUIET_MODE:
        print("")

def internet_on():
    try:
        urllib.request.urlopen('https://duckduckgo.com/', timeout=5)
        return True
    except Exception:
        return False

if not os.path.isdir(ENV_FOLDER):
    os.makedirs(ENV_FOLDER)
    downloadVendors()
elif os.path.isdir(ENV_FOLDER) and not os.path.isfile(VENDORS_FILE):
    downloadVendors()
else:
    if internet_on():
        if UPDATE_VENDORS:
            downloadVendors()

with open(VENDORS_FILE, encoding='utf-8', errors='ignore') as vendors_file:
    found = False
    for line in vendors_file:
        if "(hex)" in line:
            line = line.replace("(hex)", "")
            line = line.replace("\t", "")
            line = line.replace("   ", "\n")
            raw = line.splitlines()
            first_mac = raw[0].replace("-", ":")
            manufacturer = raw[1] if len(raw) > 1 else ""
            if mac_to_find[0:8] == first_mac[0:8]:
                print(f"{mac_to_find}, {manufacturer}")
                found = True
                break
    if not found:
        print(f"{mac_to_find}, Not Found")
        sys.exit(2)

